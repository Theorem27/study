＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝第 一 章 深入Web请求过程＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
＝＝《Http缓存》＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Last-Modified 记录页面最后修改的时间			
Etag为每个页面分配一个编号
Etag 主要为了解决 Last-Modified 无法解决的一些问题。
1、 一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET;
2、某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)
3、某些服务器不能精确的得到文件的最后修改时间；

使用Etag时 当后端Web服务器多台时 每个服务器都需要记录所有页面编号 比较难处理 

＝＝《域名解析》DNS Domain Name System＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
1、查询浏览器缓存，缓存时间通过TTL（Time To Live 生存时间 允许通过的最大网段数量 Ipv4第9字节 每经过一个路由器，路由器都会将其减1 直到0时丢弃 防止无限循环收发 节省网络资源）属性设置
2、查看操作系统缓存（Windows：C:/Windows/System32/drivers/etc/hosts Linux: /etc/hosts）域名容易被黑客劫持 Windows7中设置为只读文件 防止被修改 缓存时间受域名失效时间和缓存空间大小限制
3、查询配置的DNS服务器地址，将域名发给本地的域名服务器，LDNS承担域名解析工作 缓存域名解析结果
4、如果LDNS没有命中，LDNS就直接到Root Server域名服务器请求解析
5、根域名服务器返回所查询域的主域名服务器（gTLD Server）地址，只有13台顶级域名服务器.com .cn .org
6、LDNS向gTLD服务器发送请求。
7、gTLD服务器查找并返回此域名对应的 Name Server域名服务器的地址。是所访问域名申请注册的域名服务提供商的域名服务器
8、向Name Server域名服务器发起查询，Name Server域名服务器会查询存储的域名和IP的映射关系表，返回域名对应的IP和一个TTL值给LDNS
9、LDNS接收并缓存该IP，缓存时间由TTL值控制
10、把解析的结果返回给用户，用户根据TTL值缓存在本地系统缓存中。
在实际DNS解析过程中，可能不止这10个步骤，如：Name Server也可能有多级，或者有一个GTM来负载均衡控制

手工刷新DNS缓存 Windows: ipconfig/flushdns    Linux: /etc/init.d/nscd restart

JVM也会缓存DNS解析的结果，在InetAddress类中完成。缓存时间配置在%JAVA_HOME%\lib\security\java.security文件中
两个配置项分别是networkaddress.cache.ttl（正确解析结果缓存 默认-1 永不失效）和networkaddress.cache.negative.ttl（失败解析结果缓存默认10 缓存10秒）
（可以手动修改文件 也可以通过InetAddress类动态操作 也可以配置启动项-Dsun.net.inetaddr.ttl）

解析记录分为 A记录、MX记录、CNAME记录、NS记录和TXT记录
A记录代表Address 用来指定域名对应的IP地址
MX记录（Mail Exchange） 将某个域名下的邮件服务器指向自己的Mail Server
CNAME记录（Canonical Name）为一个域名设置一个或者多个别名。
NS记录 为某个域名指定DNS解析服务器
TXT记录 为某个主机名或域名设置说明

＝＝《CDN》Content Delivery Network＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
CDN = 镜像(Mirror) + 缓存(cache) + 整体负载均衡(GSLB)

过程：用户访问一个静态页面，向LDNS发起DNS解析请求，LDNS从Root DNS接收到Name Server服务器的IP，通过Name Server服务器CNAME解析到CDN的DNS负载均衡服务器（GTM），
由GTM返回最近的CDN节点，如果在这个节点中所请求的文件不存在，就会再回到源站去获取这个文件。

负载均衡（Load Balance）：将工作任务进行平衡，分摊到多个操作单元上执行，共同完成工作任务。
优点：提高服务器响应速度及利用效率，避免软件或者硬件模块出现单点失效，解决网络拥塞问题，实现地理位置无关性，为用户提供较一致的访问质量。
1）链路负载均衡：通过DNS解析成不同的IP，用户根据IP来访问不同的服务器。但是如果节点服务器挂掉，而用户或LDNS缓存没有更新，则用户将无法正常访问
2）集群负载均衡：硬件负载均衡，使用一台专门的硬件设备来转发请求，十分昂贵，如F5，当访问量超出服务器极限时不能动态扩容。
				 软件负载均衡，成本低，但一次访问请求要经过多次代理服务器，会增加网络延时。
3）操作系统负载均衡：利用操作系统级别的软中断或者硬件中断来达到均衡，如可以设置多队列网卡等来实现

CDN动态加速（回源）：在CDN的DNS解析中通过动态的链路探测来寻找回源最好的一条路径，然后通过DNS的调度将所有请求调度到选定的这条路径上回源，从而加速用户访问的效率。
每个CDN节点从源站下载一个一定大小的文件，看哪个链路的总耗时最短，构成一个链路列表，绑定到DNS解析上，更新到CDN的Local DNS。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝第 二 章 深入分析Java I/O工作机制＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
标准访问文件：写入操作时，当数据从用户地址空间复制到内核地址空间的缓存之后就返回
直接I/O：应用程序直接访问磁盘数据，缓存由应用程序实现，可对一些热点数据做预加载，加速数据的访问效率。
同步访问：与标准访问文件不同，只有当数据被成功写到磁盘时才返回
异步访问：当访问数据的线程发出请求之后，线程会接着去处理其他事情，而不是阻塞等待，明显提高应用程度的效率，但不会改变访问文件的效率
内存映射：操作系统将内存中的某一块区域与磁盘中的文件关联起来减少数据从内核空间缓存到用户空间缓存的数据复制操作。

同步与异步：同步可以保证程序的可靠性，异步可以提升程序的性能。
阻塞与非阻塞：是从CPU的消耗上来说的，非阻塞就是等待慢操作时CPU去完成其他的工作，可以提高CPU的利用率但会增加系统线程的切换成本
1）同步阻塞：I/O性能差，CPU大部分空闲
2）同步非阻塞：在网络I/O是长连接同时传输数据也不是很多的情况下，提升性能非常有效，但会增加CPU消耗。实际中需要看系统瓶颈是在I/O上还是在CPU上
3）异步阻塞：在分布式数据库中经常用到。向其中一台数据库写一条记录，会同步到其他几台。异步阻塞提高网络I/O效率，针对写多份相同数据的情况。
4）异步非阻塞：适合集群之间的消息同步，如Cassandra的Gossip通信机制，传多份相同的数据到集群中不同的机器，量不大却非常频繁的情况

适配器模式：将一个接口转变成另外一个接口，通过改变接口来达到重复使用的目的。
装饰器模式：保持原有接口，只是增强原有对象的功能或改变原有对象的处理方法而提升性能。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝第 三 章 深入分析Java Web中的中文编码问题＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
ASCII：总共128个字符 低7位表示。0－31是控制字符如换行、回车、删除等，32－126是打印字符，可以通过键盘输入显示。
ISO-8859-1：ASCII扩展，单字节编码，总共256个字符 遇到不在范围内的字符时 就设为3f 即 ？黑洞
UTF-16：Java作为内存的字符存储格式 定长 两个字节
UTF-8：1个字节，最高位为0，则是ASCII字符；1个字节，“11”开头，连续的1的个数代表字符的字节数；1个字节，“10”开头，代表不是首字节。

GB2312与GBK编码规则类似，但是GBK范围更大，应该选择GBK。UTF-16与UTF-8都是处理Unicode编码，UTF-16编码效率较高，从字符到字节的相互转换更简单，进行字符串操作也更好，适合本地磁盘与内存间使用
UTF-8更适合网络传输，对ASCII字符采用单字节存储，单个损坏不影响后面其他字符，在编码效率上介于GBK与UTF-16之间，是理想的中文编码方式。

Scheme:
Domain:
Port:在Tomcat配置文件<Connector port="8080">中配置
ContextPath:在Tomcat配置文件<Context path="/examples/">中配置  URI编码由<Connector URIencoding="UTF-8">确定的 默认ISO-8859-1
ServletPath:在web.xml的<url-pattern>中配置					   URI编码由<Connector URIencoding="UTF-8">确定的 默认ISO-8859-1
PathInfo:具体Servlet										   URI编码由<Connector URIencoding="UTF-8">确定的 默认ISO-8859-1
QueryString:传参   											   <Connector useBodyEncodingForURI="true">是对QueryString使用BodyEncoding 即Header中设置的ContentType
Header:Header中参数的编码和解码默认为ISO-8859-1且无法改变，所以传非ASCII编码字符时，先用com.apache.catalina.util.URILEncoder编码，在服务器端再解码使用
request.getParameter():编码由Header的ContentType决定，解码可通过request.setCharacterEncoding(charset)设置 且设置要在request.getParameter()之前，不然解码仍会失败
multipart/form-data:文件类型编码由Header的ContentType决定，当把文件内容添加到Parameters时进行编码。
responseBody:通过response.setCharacterEncoding()设置响应信息头中的ContentType，如果浏览器没取到 则用<meta HTTP-equiv="Content-Type" content="text/html; charset=GBK" />中的charset来解码，如果都没有则根据默认编码来解码
数据库：由JDBC驱动完成编码解码，Mysql可通过JDBC URL来指定 oracle的字符集，默认的就是数据库字符集

JS处理编码：（1）escape()将ASCII字母、数字、标点符号转换成Unicode编码并加上%u前缀，通过unescape()解码
			（2）encodeURI()将整个URL中的字符进行UTF-8编码，在每个码值前加上%,解码通过decodeURI()
			（3）encodeURIComponent()比encodeURI()还彻底 主要用于将一个URL当作一个参数放在另一个URL中 不用此编码参数URL中的&会影响到主URL的完整性 通过decodeURIComponent()解码

java.net.URLEncoder和java.net.URLDecoder可以将所有带%的码值按UTF-8编码解码（对应JS中encodeURIComponent()和decodeURIComponent()）

一个中文变成两个问号??:GBK编码单字符成两个字节 ISO-8859-1将两个字节解码成两个字符 再用ISO-8859-1将两个字符编码成两个3f 再用ISO-8859-1将两个3f解码成??

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝第 四 章 javac编译原理＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
1.词法分析：读取源代码，每次一字节，从源代码中找出一些规范化的Token流，也就是关键字。
2.语法分析：检查Token流中的词汇组合是否符合Java代码规范，形成一个符合Java语言规范的抽象语法树。
3.语义分析：将复杂语法转换成简单语法，例如：foreach转换成for 等语法糖，形成一个注解后的抽象语法树。
4.生成字节码：根据注解后的抽象语法树，生成符合Java虚拟机规范的字节码。

词法分析器：
接口类：com.sun.tools.javac.parser.Lexer
实现类：com.sun.tools.javac.parser.Scanner:具体读取和归类不同词法
		com.sun.tools.javac.parser.JavacParser：规定哪些词符合Java语言规范
		JavacParser.parseCompilationUnit()：从源文件的一个字符开始，按照Java语法规范依次找出package、import、类定义以及属性和方法定义等，最后构建一个抽象语法树。


